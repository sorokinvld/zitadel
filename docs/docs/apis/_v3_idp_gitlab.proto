syntax = "proto3";

package zitadel.resources.idp.v3alpha;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/resources/idp/v3alpha;idp";

import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

import "zitadel/resources/object/v3alpha/object.proto";
import "zitadel/resources/idp/v3alpha/idp.proto";

message GetGitLabIDP {
  zitadel.resources.object.v3alpha.Details details = 1;
  optional zitadel.resources.object.v3alpha.Parent parent = 2;
  zitadel.resources.object.v3alpha.State state = 3;
  ProviderType type = 4;
  GitLabIDP idp = 5;
}

message GitLabIDP {
  IDP idp = 1;
  GitLabConfig config = 2;
}

message PatchGitLabIDP {
  optional PatchIDP idp = 1;
  optional PatchGitLabConfig config = 2;
}

message GitLabConfig {
  string client_id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"client-id\"";
      description: "client id of the GitLab application";
    }
  ];
  repeated string scopes = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "[\"openid\", \"profile\", \"email\"]";
      description: "the scopes requested by ZITADEL during the request to GitLab";
    }
  ];
}

message PatchGitLabConfig {
  optional string client_id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"client-id\"";
      description: "client id of the GitLab application";
    }
  ];
  repeated string scopes = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "[\"openid\", \"profile\", \"email\"]";
      description: "the scopes requested by ZITADEL during the request to GitLab";
    }
  ];
}